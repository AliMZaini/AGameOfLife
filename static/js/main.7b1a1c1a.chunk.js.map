{"version":3,"sources":["index.js"],"names":["Cell","selectCell","props","row","col","className","this","cellClass","id","cellID","onClick","React","Component","Grid","state","width","cols","rowsArr","i","rows","j","gridArray","push","key","style","ControlButton","type","text","Main","gridArrayCopy","map","array","slice","setState","randomSeed","Array","fill","Math","random","runInterval","g0","g1","neighbourCount","curGeneration","play","clearInterval","intervalId","setInterval","speed","stop","clear","modifySpeed","x","floor","window","innerHeight","innerWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b1a1c1a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ButtonGroup } from 'react-bootstrap';\n\nclass Cell extends React.Component {\n    constructor() {\n        super();\n    }\n\n    selectCell = () => {\n        this.props.selectCell(this.props.row, this.props.col);\n    };\n\n    render() {\n        return (\n            <div\n                className={this.props.cellClass}\n                id={this.props.cellID}\n                onClick={this.selectCell} // which selectCell method to use?\n            >\n            </div>\n        );\n    }\n}\n\nclass Grid extends React.Component {\n    constructor() {\n        super();\n        this.state = {};\n    }\n\n    render() {\n        const width = this.props.cols * 29;\n        var rowsArr = [];\n\n        // Don't understand this part\n        var cellClass = \"\";\n        for (var i = 0; i < this.props.rows; i++) {\n            for (var j = 0; j < this.props.cols; j++) {\n                var cellID = i + \"-\" + j;\n                cellClass = this.props.gridArray[i][j] ? \"cell on\" : \"cell off\";\n                rowsArr.push(\n                    <Cell\n                        cellClass={cellClass}\n                        key={cellID}\n                        cellID={cellID} // cell and ID are the same?\n                        row={i}\n                        col={j}\n                        selectCell={this.props.selectCell}\n                    />\n                )\n            }\n        }\n\n        return (\n            <div className=\"grid\" style={{width: width}}>\n                {rowsArr}\n            </div>\n        )\n    }\n}\n\nclass ControlButton extends React.Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <div>\n                <button type=\"button\" onClick={this.props.onClick}>{this.props.text}</button>\n            </div>\n        );\n    }\n}\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n\n        // Could make it resize with window, but I rather do this.\n        this.rows = Math.floor(window.innerHeight / 34);\n        this.cols = Math.floor(window.innerWidth / 30);\n\n        this.state = {\n            speed: 100,\n            rows: this.rows,\n            cols: this.cols,\n            curGeneration: 0,\n            gridArray: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n        };\n\n        // this.selectCell = this.selectCell.bind(this); // Instead of binding I could make selectCell an arrow function\n    }\n\n    selectCell = (row, col) => {\n        let gridArrayCopy = this.state.gridArray.map(array => array.slice());\n        gridArrayCopy[row][col] = !gridArrayCopy[row][col];\n        this.setState({\n            gridArray: gridArrayCopy\n        });\n    };\n\n    randomSeed = () => {\n        // Clear before applying random seed\n        var gridArrayCopy = Array(this.state.rows).fill().map(() => Array(this.state.cols).fill(false));\n        for (var i = 0; i < this.state.rows; i++) {\n            for (var j = 0; j < this.state.cols; j++) {\n                if (Math.random() > 0.7) {\n                    gridArrayCopy[i][j] = true;\n                }\n            }\n        }\n        this.setState({\n            gridArray: gridArrayCopy\n        });\n    };\n\n    runInterval = () => {\n        var g0 = this.state.gridArray;\n        var g1 = this.state.gridArray.map(array => array.slice());\n\n        for (var i = 0; i < this.state.rows; i++) {\n            for (var j = 0; j < this.state.cols; j++) {\n\n                var neighbourCount = 0;\n\n                if (i > 0 && j > 0) if (g0[i - 1][j - 1]) {\n                    neighbourCount++;\n                }\n                if (j > 0) if (g0[i][j - 1]) {\n                    neighbourCount++;\n                }\n                if (i < this.state.rows - 1 && j > 0) if (g0[i + 1][j - 1]) {\n                    neighbourCount++;\n                }\n\n                if (i > 0) if (g0[i - 1][j]) {\n                    neighbourCount++;\n                }\n                if (i < this.state.rows - 1) if (g0[i + 1][j]) {\n                    neighbourCount++;\n                }\n\n                if (i > 0 && j < this.state.cols - 1) if (g0[i - 1][j + 1]) {\n                    neighbourCount++;\n                }\n                if (j < this.state.cols - 1) if (g0[i][j + 1]) {\n                    neighbourCount++;\n                }\n                if (i < this.state.rows - 1 && j < this.state.cols - 1) if (g0[i + 1][j + 1]) {\n                    neighbourCount++;\n                }\n\n                if (g0[i][j] && (neighbourCount < 2 || neighbourCount > 3)) {\n                    g1[i][j] = false;\n                }\n                if (!g0[i][j] && neighbourCount === 3) {\n                    g1[i][j] = true;\n                }\n            }\n        }\n\n        this.setState({\n            curGeneration: this.state.curGeneration + 1,\n            gridArray: g1\n        });\n    };\n\n    play = () => {\n        clearInterval(this.intervalId);\n        this.setState({\n            curGeneration: 0,\n        });\n        this.intervalId = setInterval(this.runInterval, this.state.speed);\n    };\n\n    stop = () => {\n        clearInterval(this.intervalId);\n    };\n\n    clear = () => {\n        this.setState({\n            gridArray: Array(this.state.rows).fill().map(() => Array(this.state.cols).fill(false))\n        });\n    };\n\n    modifySpeed = (x) => {\n        if (this.state.speed > x + 1) {\n            this.setState({\n                speed: this.state.speed + x\n            });\n        }\n    };\n\n    componentDidMount() { // As soon as component loads, this loads\n        this.randomSeed();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"center\">A Game of Life</h1>\n                <h2 className=\"center\">Generation: {this.state.curGeneration}</h2>\n\n                <div className=\"center\">\n                    <ButtonGroup>\n                        <ControlButton\n                            text=\"Play\"\n                            onClick={this.play}\n                        />\n                        <ControlButton\n                            text=\"Stop\"\n                            onClick={this.stop}\n                        />\n                        <ControlButton\n                            text=\"Random\"\n                            onClick={this.randomSeed}\n                        />\n                        <ControlButton\n                            text=\"Clear\"\n                            onClick={this.clear}\n                        />\n                        <ControlButton\n                            text=\"Faster\"\n                            onClick={() => this.modifySpeed(-5)}\n                        />\n                        <ControlButton\n                            text=\"Slower\"\n                            onClick={() => this.modifySpeed(5)}\n                        />\n                    </ButtonGroup>\n                </div>\n\n                <Grid\n                    gridArray={this.state.gridArray}\n                    rows={this.state.rows}\n                    cols={this.state.cols}\n                    selectCell={this.selectCell}\n                />\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <Main/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}